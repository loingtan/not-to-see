# docker-compose.yml

networks:
  app-network:
    driver: bridge
    external: false

volumes:
  pg-primary-data:
  pg-replica-1-data:
  pg-replica-2-data:

services:
  pg-primary:
    image: bitnami/postgresql:15
    container_name: pg-primary
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=password123
      - POSTGRESQL_PASSWORD=password123
      - POSTGRESQL_DATABASE=course_registration
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      # Tunings
      - POSTGRESQL_SHARED_BUFFERS=512MB
      - POSTGRESQL_EFFECTIVE_CACHE_SIZE=1536MB
      - POSTGRESQL_WORK_MEM=16MB
      - POSTGRESQL_MAINTENANCE_WORK_MEM=256MB
      - POSTGRESQL_MAX_CONNECTIONS=400
      - POSTGRESQL_WAL_LEVEL=replica
      - POSTGRESQL_MAX_WAL_SENDERS=10
    ports:
      - "15432:5432"
    volumes:
      - pg-primary-data:/bitnami/postgresql
      - ./scripts/database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      # Check only that the server accepts TCP connections; don't depend on a DB existing yet
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 40s
    restart: unless-stopped
    networks: [app-network]

  pg-replica-1:
    image: bitnami/postgresql:15
    container_name: pg-replica-1
    depends_on:
      pg-primary:
        condition: service_healthy
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=password123
      - POSTGRESQL_PASSWORD=password123
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_MASTER_HOST=pg-primary
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_HOT_STANDBY=on
      - POSTGRESQL_HOT_STANDBY_FEEDBACK=on
      - POSTGRESQL_MAX_CONNECTIONS=400
    ports:
      - "15433:5432"
    volumes:
      - pg-replica-1-data:/bitnami/postgresql
    healthcheck:
      # Do NOT require a specific DB name; replicas might be cloning
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 60s
    restart: unless-stopped
    networks: [app-network]

  pg-replica-2:
    image: bitnami/postgresql:15
    container_name: pg-replica-2
    depends_on:
      pg-primary:
        condition: service_healthy
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=password123
      - POSTGRESQL_PASSWORD=password123
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_MASTER_HOST=pg-primary
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_HOT_STANDBY=on
      - POSTGRESQL_HOT_STANDBY_FEEDBACK=on
      - POSTGRESQL_MAX_CONNECTIONS=400
    ports:
      - "15434:5432"
    volumes:
      - pg-replica-2-data:/bitnami/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 60s
    restart: unless-stopped
    networks: [app-network]

  pgpool:
    image: bitnami/pgpool:4
    container_name: pgpool
    depends_on:
      pg-primary:
        condition: service_healthy
      pg-replica-1:
        condition: service_healthy
      pg-replica-2:
        condition: service_healthy
    environment:
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=admin123
      # Backend node list: id:host:port
      - PGPOOL_BACKEND_NODES=0:pg-primary:5432,1:pg-replica-1:5432,2:pg-replica-2:5432
      - PGPOOL_POSTGRES_USERNAME=postgres
      - PGPOOL_POSTGRES_PASSWORD=password123
      - PGPOOL_POSTGRES_DATABASE=course_registration
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      # Streaming replication checks
      - PGPOOL_SR_CHECK_USER=postgres
      - PGPOOL_SR_CHECK_PASSWORD=password123
      - PGPOOL_HEALTH_CHECK_PERIOD=5
      - PGPOOL_HEALTH_CHECK_TIMEOUT=3
      - PGPOOL_FAILOVER_ON_BACKEND_ERROR=on
      # Child process pool sizes (tune for your workload)
      - PGPOOL_NUM_INIT_CHILDREN=64
      - PGPOOL_MAX_POOL=4
    ports:
      - "9999:5432"
    healthcheck:
      # Prove Pgpool can accept connections AND talk to backends
      test:
        [
          "CMD-SHELL",
          "PGPASSWORD=password123 psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c 'SHOW pool_nodes;' -t >/dev/null",
        ]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 30s
    restart: unless-stopped
    networks: [app-network]

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    depends_on:
      pgpool:
        condition: service_healthy
    ports:
      - "6432:6432"
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    healthcheck:
      # Prefer an actual client round-trip through PgBouncer
      test:
        [
          "CMD-SHELL",
          "PGPASSWORD=password123 psql -h 127.0.0.1 -p 6432 -U postgres -d postgres -c 'SELECT 1;' -t >/dev/null",
        ]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 20s
    restart: unless-stopped
    networks: [app-network]
